#!/usr/bin/env python3
"""
Script de d√©marrage optimis√© pour Render
EXPERTS IA - Plateforme d'experts en construction
"""

import os
import sys
import subprocess
import signal
from pathlib import Path

def setup_environment():
    """Configure l'environnement pour Render."""
    # Port automatique de Render
    port = os.environ.get('PORT', '8501')
    
    # Configurer les variables par d√©faut si non d√©finies
    defaults = {
        'LOG_LEVEL': 'INFO',
        'MAX_FILE_SIZE_MB': '50',
        'ENABLE_DEBUG': 'false',
        'ENABLE_SECURITY_LOGGING': 'true',
        'MAX_LOGIN_ATTEMPTS': '5',
        'LOCKOUT_DURATION': '30'
    }
    
    for key, value in defaults.items():
        if key not in os.environ:
            os.environ[key] = value
    
    print(f"üöÄ D√©marrage EXPERTS IA sur le port {port}")
    print(f"üìä Niveau de log: {os.environ.get('LOG_LEVEL')}")
    print(f"üîí S√©curit√©: {os.environ.get('ENABLE_SECURITY_LOGGING')}")
    
    return port

def validate_critical_config():
    """Valide la configuration critique."""
    critical_vars = ['ANTHROPIC_API_KEY', 'APP_PASSWORD']
    missing = []
    
    for var in critical_vars:
        if not os.environ.get(var):
            missing.append(var)
    
    if missing:
        print(f"‚ùå ERREUR CRITIQUE: Variables manquantes: {', '.join(missing)}")
        print("üí° Configurez ces variables dans le dashboard Render")
        sys.exit(1)
    
    print("‚úÖ Configuration critique valid√©e")

def start_streamlit(port):
    """D√©marre Streamlit avec la configuration optimale."""
    cmd = [
        sys.executable, '-m', 'streamlit', 'run', 'app.py',
        '--server.port', port,
        '--server.address', '0.0.0.0',
        '--server.headless', 'true',
        '--server.enableCORS', 'false',
        '--server.enableXsrfProtection', 'true',
        '--server.maxUploadSize', os.environ.get('MAX_FILE_SIZE_MB', '50'),
        '--browser.gatherUsageStats', 'false',
        '--theme.base', 'light'
    ]
    
    print(f"üèÉ Commande: {' '.join(cmd)}")
    
    # Gestion des signaux pour arr√™t propre
    def signal_handler(sig, frame):
        print('\nüõë Arr√™t demand√©...')
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # D√©marrer Streamlit
    try:
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors du d√©marrage: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        print('\nüõë Arr√™t par Ctrl+C')
        sys.exit(0)

def main():
    """Fonction principale."""
    print("=" * 50)
    print("üèóÔ∏è  EXPERTS IA - PLATEFORME S√âCURIS√âE")
    print("   60+ Experts en Construction du Qu√©bec")
    print("=" * 50)
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if not Path('app.py').exists():
        print("‚ùå ERREUR: app.py non trouv√© dans le r√©pertoire courant")
        sys.exit(1)
    
    # Configuration
    port = setup_environment()
    validate_critical_config()
    
    # V√©rifier les profils
    profiles_dir = Path('profiles')
    if profiles_dir.exists():
        profile_count = len(list(profiles_dir.glob('*.txt')))
        print(f"üë• {profile_count} profils d'experts charg√©s")
    else:
        print("‚ö†Ô∏è Dossier profiles non trouv√©")
    
    print("üöÄ D√©marrage de l'application...")
    start_streamlit(port)

if __name__ == "__main__":
    main()