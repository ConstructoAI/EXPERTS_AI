"""
Script de test pour la base de donn√©es Takeoff AI
V√©rifie que toutes les fonctions fonctionnent correctement
"""
# -*- coding: utf-8 -*-
import sys
import io

# Forcer l'encodage UTF-8 pour Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

from takeoff_db import (
    init_takeoff_db, save_project, save_measurement, save_all_measurements,
    get_all_projects, load_project, delete_project, get_project_stats,
    search_projects, update_project
)

def test_all():
    """Test complet de toutes les fonctions"""

    print("=" * 60)
    print("TEST DE LA BASE DE DONN√âES TAKEOFF AI")
    print("=" * 60)

    # 1. Initialisation
    print("\n1Ô∏è‚É£ Initialisation de la base de donn√©es...")
    try:
        init_takeoff_db()
        print("   ‚úÖ Base de donn√©es initialis√©e")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return

    # 2. Cr√©ation d'un projet
    print("\n2Ô∏è‚É£ Cr√©ation d'un projet de test...")
    try:
        project_id = save_project(
            nom_projet="Projet Test - Maison Dupont",
            client_nom="M. Jean Dupont",
            pdf_nom="plan_test.pdf",
            calibration={'value': 1.5, 'unit': 'pi'},
            notes="Projet de test pour validation du syst√®me"
        )
        print(f"   ‚úÖ Projet cr√©√© avec ID: {project_id}")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return

    # 3. Ajout de mesures
    print("\n3Ô∏è‚É£ Ajout de mesures au projet...")
    try:
        mesures = [
            {
                'type': 'distance',
                'label': 'Mur ext√©rieur Nord',
                'value': 25.5,
                'unit': 'pi',
                'page_number': 1,
                'points': [[0, 0], [25.5, 0]],
                'product': {
                    'name': 'B√©ton 25 MPa',
                    'category': 'B√©ton',
                    'unit_price': 150.0
                }
            },
            {
                'type': 'surface',
                'label': 'Surface dalle sous-sol',
                'value': 450.0,
                'unit': 'pi¬≤',
                'page_number': 1,
                'points': [[0, 0], [30, 0], [30, 15], [0, 15]],
                'product': {
                    'name': 'B√©ton 30 MPa',
                    'category': 'B√©ton',
                    'unit_price': 165.0
                }
            },
            {
                'type': 'distance',
                'label': 'P√©rim√®tre fondation',
                'value': 90.0,
                'unit': 'pi',
                'page_number': 1,
                'points': [[0, 0], [30, 0], [30, 15], [0, 15], [0, 0]],
                'product': {
                    'name': 'Coffrage contreplaqu√©',
                    'category': 'Coffrages',
                    'unit_price': 12.0
                }
            }
        ]

        save_all_measurements(project_id, mesures)
        print(f"   ‚úÖ {len(mesures)} mesures ajout√©es")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return

    # 4. R√©cup√©ration du projet
    print("\n4Ô∏è‚É£ Chargement du projet...")
    try:
        data = load_project(project_id)
        if data:
            projet = data['project']
            mesures_chargees = data['measurements']
            print(f"   ‚úÖ Projet charg√©: {projet['nom_projet']}")
            print(f"      - Client: {projet['client_nom']}")
            print(f"      - Mesures: {len(mesures_chargees)}")
            print(f"      - Montant total: {projet['total_montant']:.2f}$")
        else:
            print("   ‚ùå Projet non trouv√©")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")

    # 5. Mise √† jour du projet
    print("\n5Ô∏è‚É£ Mise √† jour du projet...")
    try:
        update_project(
            project_id,
            notes="Notes mises √† jour - Test valid√©!",
            statut="termine"
        )
        print("   ‚úÖ Projet mis √† jour")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")

    # 6. Cr√©ation d'un second projet
    print("\n6Ô∏è‚É£ Cr√©ation d'un second projet...")
    try:
        project_id_2 = save_project(
            nom_projet="Projet Test 2 - R√©novation",
            client_nom="Mme Marie Tremblay",
            pdf_nom="plan_renovation.pdf"
        )
        print(f"   ‚úÖ Second projet cr√©√© avec ID: {project_id_2}")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")

    # 7. R√©cup√©ration de tous les projets
    print("\n7Ô∏è‚É£ R√©cup√©ration de tous les projets...")
    try:
        projets = get_all_projects()
        print(f"   ‚úÖ {len(projets)} projet(s) trouv√©(s)")
        for i, proj in enumerate(projets, 1):
            print(f"      {i}. {proj[1]} - {proj[4]} mesures - {proj[5]:.2f}$ - {proj[8]}")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")

    # 8. Recherche
    print("\n8Ô∏è‚É£ Test de recherche...")
    try:
        resultats = search_projects("Dupont")
        print(f"   ‚úÖ Recherche 'Dupont': {len(resultats)} r√©sultat(s)")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")

    # 9. Statistiques
    print("\n9Ô∏è‚É£ Statistiques globales...")
    try:
        stats = get_project_stats()
        print("   ‚úÖ Statistiques:")
        print(f"      - Total projets: {stats['total_projects']}")
        print(f"      - Total mesures: {stats['total_measurements']}")
        print(f"      - Montant total: {stats['total_amount']:.2f}$")
        print(f"      - Projets en cours: {stats['projects_en_cours']}")
        print(f"      - Projets termin√©s: {stats['projects_termines']}")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")

    # 10. Suppression du second projet (nettoyage)
    print("\nüîü Nettoyage (suppression second projet)...")
    try:
        delete_project(project_id_2)
        print("   ‚úÖ Second projet supprim√©")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")

    # R√©sum√© final
    print("\n" + "=" * 60)
    print("R√âSUM√â DES TESTS")
    print("=" * 60)

    # V√©rifier l'√©tat final
    try:
        projets_finaux = get_all_projects()
        stats_finales = get_project_stats()

        print(f"\n‚úÖ Tests termin√©s avec succ√®s!")
        print(f"\n√âtat final:")
        print(f"  - Projets restants: {len(projets_finaux)}")
        print(f"  - Total mesures: {stats_finales['total_measurements']}")
        print(f"  - Montant total: {stats_finales['total_amount']:.2f}$")

        if len(projets_finaux) > 0:
            print(f"\nüìä Projet de test conserv√©:")
            print(f"  ID: {project_id}")
            print(f"  Nom: {projets_finaux[0][1]}")
            print(f"  Note: Vous pouvez le supprimer manuellement si d√©sir√©")
    except Exception as e:
        print(f"‚ùå Erreur lors du r√©sum√©: {e}")

    print("\n" + "=" * 60)

if __name__ == "__main__":
    test_all()
