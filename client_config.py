"""
Module de gestion de la configuration des clients pour EXPERTS IA
Permet la sauvegarde et la r√©utilisation des informations clients dans les soumissions
"""

import streamlit as st
import sqlite3
import json
import os
from datetime import datetime

# Base de donn√©es pour les clients
DB_PATH = 'clients.db'


def init_clients_table():
    """Initialise la table des clients"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS clients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nom TEXT NOT NULL,
            adresse TEXT,
            ville TEXT,
            province TEXT DEFAULT 'Qu√©bec',
            code_postal TEXT,
            telephone_bureau TEXT,
            telephone_cellulaire TEXT,
            email TEXT,
            contact_principal_nom TEXT,
            contact_principal_titre TEXT,
            contact_principal_telephone TEXT,
            contact_principal_email TEXT,
            notes TEXT,
            date_creation TEXT,
            date_modification TEXT,
            actif INTEGER DEFAULT 1
        )
    ''')

    conn.commit()

    # V√©rifier si on a des clients
    cursor.execute('SELECT COUNT(*) FROM clients')
    count = cursor.fetchone()[0]

    # Si aucun client, cr√©er un client par d√©faut
    if count == 0:
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute('''
            INSERT INTO clients (
                nom, adresse, ville, province, code_postal,
                telephone_bureau, telephone_cellulaire, email,
                contact_principal_nom, contact_principal_titre,
                contact_principal_telephone, contact_principal_email,
                notes, date_creation, date_modification, actif
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            'Construction R√©sidentielle Laval Inc.',
            '450 Boulevard des Laurentides',
            'Laval',
            'Qu√©bec',
            'H7G 2V1',
            '450-555-1234',
            '514-555-5678',
            'info@constructionlaval.ca',
            'Jean-Pierre Tremblay',
            'Directeur de projets',
            '514-555-5678',
            'jp.tremblay@constructionlaval.ca',
            'Client exemple cr√©√© par d√©faut. Projet r√©sidentiel typique avec bonnes r√©f√©rences.',
            now,
            now,
            1
        ))
        conn.commit()
        print("[CLIENT DB] Client par d√©faut cr√©√©: Construction R√©sidentielle Laval Inc.")

    conn.close()


def get_all_clients(actif_seulement=True):
    """R√©cup√®re tous les clients"""
    init_clients_table()
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    if actif_seulement:
        cursor.execute('SELECT * FROM clients WHERE actif = 1 ORDER BY nom')
    else:
        cursor.execute('SELECT * FROM clients ORDER BY nom')

    colonnes = [description[0] for description in cursor.description]
    clients = []

    for row in cursor.fetchall():
        client = dict(zip(colonnes, row))
        clients.append(client)

    conn.close()
    return clients


def get_client_by_id(client_id):
    """R√©cup√®re un client par son ID"""
    init_clients_table()
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM clients WHERE id = ?', (client_id,))
    colonnes = [description[0] for description in cursor.description]
    row = cursor.fetchone()

    conn.close()

    if row:
        return dict(zip(colonnes, row))
    return None


def save_client(client_data, client_id=None):
    """Sauvegarde ou met √† jour un client"""
    init_clients_table()
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    if client_id:
        # Mise √† jour
        cursor.execute('''
            UPDATE clients SET
                nom = ?,
                adresse = ?,
                ville = ?,
                province = ?,
                code_postal = ?,
                telephone_bureau = ?,
                telephone_cellulaire = ?,
                email = ?,
                contact_principal_nom = ?,
                contact_principal_titre = ?,
                contact_principal_telephone = ?,
                contact_principal_email = ?,
                notes = ?,
                date_modification = ?
            WHERE id = ?
        ''', (
            client_data.get('nom', ''),
            client_data.get('adresse', ''),
            client_data.get('ville', ''),
            client_data.get('province', 'Qu√©bec'),
            client_data.get('code_postal', ''),
            client_data.get('telephone_bureau', ''),
            client_data.get('telephone_cellulaire', ''),
            client_data.get('email', ''),
            client_data.get('contact_principal_nom', ''),
            client_data.get('contact_principal_titre', ''),
            client_data.get('contact_principal_telephone', ''),
            client_data.get('contact_principal_email', ''),
            client_data.get('notes', ''),
            now,
            client_id
        ))
    else:
        # Insertion
        cursor.execute('''
            INSERT INTO clients (
                nom, adresse, ville, province, code_postal,
                telephone_bureau, telephone_cellulaire, email,
                contact_principal_nom, contact_principal_titre,
                contact_principal_telephone, contact_principal_email,
                notes, date_creation, date_modification, actif
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            client_data.get('nom', ''),
            client_data.get('adresse', ''),
            client_data.get('ville', ''),
            client_data.get('province', 'Qu√©bec'),
            client_data.get('code_postal', ''),
            client_data.get('telephone_bureau', ''),
            client_data.get('telephone_cellulaire', ''),
            client_data.get('email', ''),
            client_data.get('contact_principal_nom', ''),
            client_data.get('contact_principal_titre', ''),
            client_data.get('contact_principal_telephone', ''),
            client_data.get('contact_principal_email', ''),
            client_data.get('notes', ''),
            now,
            now,
            1
        ))
        client_id = cursor.lastrowid

    conn.commit()
    conn.close()

    return client_id


def delete_client(client_id):
    """D√©sactive un client (soft delete)"""
    init_clients_table()
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute('UPDATE clients SET actif = 0 WHERE id = ?', (client_id,))

    conn.commit()
    conn.close()


def show_clients_management():
    """Interface Streamlit pour g√©rer les clients"""

    st.markdown("## üë• Gestion des Clients")

    # Message si modification en cours
    if 'client_a_modifier' in st.session_state and st.session_state.client_a_modifier:
        client_temp = get_client_by_id(st.session_state.client_a_modifier)
        if client_temp:
            st.info(f"‚úèÔ∏è **Mode modification activ√©** pour le client: **{client_temp['nom']}**. Allez dans l'onglet '‚ûï Ajouter/Modifier' pour modifier les informations.")

    # Onglets
    tab1, tab2 = st.tabs(["üìã Liste des clients", "‚ûï Ajouter/Modifier"])

    with tab1:
        st.markdown("### Liste des clients")

        clients = get_all_clients()

        if not clients:
            st.info("Aucun client enregistr√©. Utilisez l'onglet 'Ajouter/Modifier' pour cr√©er un nouveau client.")
        else:
            # Afficher les clients sous forme de cartes
            for client in clients:
                with st.container():
                    col1, col2, col3 = st.columns([3, 1, 1])

                    with col1:
                        st.markdown(f"**{client['nom']}**")
                        if client['adresse']:
                            st.caption(f"üìç {client['adresse']}, {client['ville']} {client['code_postal']}")
                        if client['email']:
                            st.caption(f"üìß {client['email']}")
                        if client['telephone_bureau']:
                            st.caption(f"üìû {client['telephone_bureau']}")

                    with col2:
                        if st.button("‚úèÔ∏è Modifier", key=f"edit_{client['id']}"):
                            st.session_state.client_a_modifier = client['id']
                            st.rerun()

                    with col3:
                        if st.button("üóëÔ∏è Supprimer", key=f"delete_{client['id']}"):
                            if st.session_state.get(f'confirm_delete_{client["id"]}'):
                                delete_client(client['id'])
                                st.success(f"Client {client['nom']} supprim√©")
                                st.rerun()
                            else:
                                st.session_state[f'confirm_delete_{client["id"]}'] = True
                                st.warning("‚ö†Ô∏è Cliquez √† nouveau pour confirmer la suppression")

                    st.divider()

    with tab2:
        # V√©rifier si on modifie un client existant
        client_a_modifier = None
        if 'client_a_modifier' in st.session_state:
            client_a_modifier = get_client_by_id(st.session_state.client_a_modifier)
            if client_a_modifier:
                st.markdown(f"### ‚úèÔ∏è Modification : {client_a_modifier['nom']}")
            else:
                st.session_state.pop('client_a_modifier', None)
        else:
            st.markdown("### ‚ûï Nouveau Client")

        with st.form("form_client"):
            st.markdown("#### Informations g√©n√©rales")

            col1, col2 = st.columns(2)

            with col1:
                nom = st.text_input(
                    "Nom du client *",
                    value=client_a_modifier['nom'] if client_a_modifier else "",
                    help="Nom complet du client (entreprise ou particulier)"
                )

                adresse = st.text_input(
                    "Adresse",
                    value=client_a_modifier['adresse'] if client_a_modifier else ""
                )

                ville = st.text_input(
                    "Ville",
                    value=client_a_modifier['ville'] if client_a_modifier else ""
                )

            with col2:
                province = st.selectbox(
                    "Province",
                    options=['Qu√©bec', 'Ontario', 'Nouveau-Brunswick', 'Nouvelle-√âcosse', 'Autre'],
                    index=0 if not client_a_modifier else (['Qu√©bec', 'Ontario', 'Nouveau-Brunswick', 'Nouvelle-√âcosse', 'Autre'].index(client_a_modifier['province']) if client_a_modifier['province'] in ['Qu√©bec', 'Ontario', 'Nouveau-Brunswick', 'Nouvelle-√âcosse', 'Autre'] else 0)
                )

                code_postal = st.text_input(
                    "Code postal",
                    value=client_a_modifier['code_postal'] if client_a_modifier else "",
                    max_chars=7
                )

            st.markdown("#### Coordonn√©es")

            col1, col2 = st.columns(2)

            with col1:
                telephone_bureau = st.text_input(
                    "T√©l√©phone bureau",
                    value=client_a_modifier['telephone_bureau'] if client_a_modifier else "",
                    help="Format: 514-123-4567"
                )

                email = st.text_input(
                    "Courriel",
                    value=client_a_modifier['email'] if client_a_modifier else ""
                )

            with col2:
                telephone_cellulaire = st.text_input(
                    "T√©l√©phone cellulaire",
                    value=client_a_modifier['telephone_cellulaire'] if client_a_modifier else ""
                )

            st.markdown("#### Personne contact")

            col1, col2 = st.columns(2)

            with col1:
                contact_nom = st.text_input(
                    "Nom du contact",
                    value=client_a_modifier['contact_principal_nom'] if client_a_modifier else ""
                )

                contact_titre = st.text_input(
                    "Titre / Fonction",
                    value=client_a_modifier['contact_principal_titre'] if client_a_modifier else "",
                    help="Ex: Directeur, Propri√©taire, etc."
                )

            with col2:
                contact_telephone = st.text_input(
                    "T√©l√©phone contact",
                    value=client_a_modifier['contact_principal_telephone'] if client_a_modifier else ""
                )

                contact_email = st.text_input(
                    "Courriel contact",
                    value=client_a_modifier['contact_principal_email'] if client_a_modifier else ""
                )

            st.markdown("#### Notes")
            notes = st.text_area(
                "Notes internes",
                value=client_a_modifier['notes'] if client_a_modifier else "",
                help="Informations additionnelles, pr√©f√©rences, historique, etc.",
                height=100
            )

            col1, col2 = st.columns([1, 4])

            with col1:
                submitted = st.form_submit_button(
                    "üíæ Sauvegarder" if client_a_modifier else "‚ûï Cr√©er",
                    use_container_width=True
                )

            with col2:
                if client_a_modifier:
                    if st.form_submit_button("‚ùå Annuler", use_container_width=True):
                        st.session_state.pop('client_a_modifier', None)
                        st.rerun()

            if submitted:
                if not nom:
                    st.error("‚ö†Ô∏è Le nom du client est obligatoire")
                else:
                    client_data = {
                        'nom': nom,
                        'adresse': adresse,
                        'ville': ville,
                        'province': province,
                        'code_postal': code_postal,
                        'telephone_bureau': telephone_bureau,
                        'telephone_cellulaire': telephone_cellulaire,
                        'email': email,
                        'contact_principal_nom': contact_nom,
                        'contact_principal_titre': contact_titre,
                        'contact_principal_telephone': contact_telephone,
                        'contact_principal_email': contact_email,
                        'notes': notes
                    }

                    client_id = save_client(
                        client_data,
                        client_a_modifier['id'] if client_a_modifier else None
                    )

                    if client_a_modifier:
                        st.success(f"‚úÖ Client '{nom}' modifi√© avec succ√®s!")
                        st.session_state.pop('client_a_modifier', None)
                    else:
                        st.success(f"‚úÖ Client '{nom}' cr√©√© avec succ√®s!")

                    st.rerun()


def get_client_selector(key_suffix="default"):
    """Widget de s√©lection de client pour les soumissions"""
    clients = get_all_clients()

    if not clients:
        st.warning("Aucun client enregistr√©. Cr√©ez d'abord un client dans la section 'Gestion des Clients'.")
        return None

    # Options de s√©lection
    options = ["S√©lectionnez un client..."] + [f"{c['nom']} - {c['ville'] if c['ville'] else 'Ville non renseign√©e'}" for c in clients]

    selection = st.selectbox(
        "Client",
        options=options,
        key=f"client_selector_{key_suffix}",
        help="S√©lectionnez un client existant ou cr√©ez-en un nouveau dans la section 'Gestion des Clients'"
    )

    if selection == "S√©lectionnez un client...":
        return None

    # Trouver le client s√©lectionn√©
    index = options.index(selection) - 1
    return clients[index]


# Initialiser la base de donn√©es au chargement du module
init_clients_table()
